<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">

	<util:map id="baseSql" map-class="java.util.HashMap"
		key-type="java.lang.String">
		
		<!-- Common -->
		<entry key="Role.auth">
			<value><![CDATA[select
			  rle.ROLCODE AS ROLE,
			  rlf.PGMCODE AS AUTHCODE
			from DEF_RLE rle
			  inner join DEF_RLF rlf
			  on rlf.ROLCODE=rle.ROLCODE
			where rle.SYSTYP= :system and rle.STU='0'
			order by rle.ROLCODE, rlf.PGMCODE]]></value>
		</entry>
		<entry key="role">
			<value><![CDATA[select ROLCODE
   			from DEF_RLE
   			where STU='0'
   			order by ROLCODE]]></value>
		</entry>
		<entry key="docAuth">
			<value><![CDATA[select * from DEF_RDA
   			where SYSTYP=:system
			order by ROLCODE]]></value>
		</entry>
		<entry key="pgmSet_role">
			<value><![CDATA[select rle.rolCode as roleId, rle.rolName from 
			DEF_RLE rle inner join DEF_RLF rlf on rlf.ROLCODE=rle.ROLCODE 
			where rle.SYSTYP= :systyp and rlf.pgmCode= :pgmCode]]></value>
		</entry>
		<entry key="pgmSet_getEditRole">
			<value><![CDATA[select rle.rolCode as roleId, rle.rolName from 
			DEF_RLE rle where rle.SYSTYP= :systyp and rle.ROLCODE not in (select rolcode from DEF_RLF where pgmCode = :pgmCode)]]></value>
		</entry>
		<entry key="pgmSet_deleteRlf">
			<value><![CDATA[delete from DEF_RLF rlf where rlf.pgmCode = :pgmCode and rlf.ROLCODE in (:delRole)]]></value>
		</entry>
		<entry key="roleSet_getUser">
			<value><![CDATA[select usr.STAFFPID as userId, usr.STAFFPNM as userName, 
			usr.DEPARTNO as unitNo, brn.DEPARTNM from DEF_USR usr 
			inner join DEF_RLSET rls on usr.staffPId = rls.staffPId 
			inner join DEF_BRN brn on brn.departNo = usr.departNo 
			where rls.rolCode = :rolCode]]></value>
		</entry>
		<entry key="roleSet_getEditUser">
			<value><![CDATA[select usr.STAFFPID as userId, usr.STAFFPNM as userName from DEF_USR usr 
			inner join DEF_BRN brn on brn.departNo = usr.departNo 
			where usr.STAFFPID not in (select staffPId from DEF_RLSET where rolcode = :rolCode) and (:unitNo = 'All' or brn.departNo = :unitNo)]]></value>
		</entry>
		<entry key="roleSet_getFunc">
			<value><![CDATA[select pgm.PGMCODE as code, pgm.PGMNAME as name, 
			pgm.PGMTYP as parent from DEF_PGM pgm inner join DEF_RLF rlf 
			on pgm.PGMCODE = rlf.PGMCODE where rlf.ROLCODE = :rolCode]]></value>
		</entry>
		<entry key="roleSet_getEditFunc">
			<value><![CDATA[select distinct pgm.PGMCODE as code, pgm.PGMNAME as name, 
			pgm.PGMTYP as parent from DEF_PGM pgm,
			(select * from DEF_PGM where (:pgmTyp = 'All' or (pgmTyp = :pgmTyp or pgmCode= :pgmTyp))) pgm1
			where (pgm.PGMCODE=pgm1.PGMCODE or pgm.PGMTYP=pgm1.PGMCODE) and pgm.sysTyp=:sysTyp
			and pgm.pgmCode not in (select pgmCode from DEF_RLF where rolcode = :rolCode)]]></value>
		</entry>
		<entry key="roleSet_deleteRlset">
			<value><![CDATA[delete from DEF_RLSET rls where rls.rolCode = :rolCode and rls.STAFFPID in (:delUsrs)]]></value>
		</entry>
		<entry key="roleSet_deleteRlf">
			<value><![CDATA[delete from DEF_RLF rlf where rlf.rolCode = :rolCode and rlf.pgmCode in (:delFunc)]]></value>
		</entry>
        <entry key="User.find">
            <value><![CDATA[
                select distinct u.* from def_usr u left join def_rlset ur on ur.staffpid = u.staffpid
            ]]></value>
        </entry>
		<entry key="Role.findAllWithSelectedByUserId">
			<value><![CDATA[
                select
                    r.rolcode as roleId,
                    r.rolName,
                    auth.staffpid
                from def_rle r
                left join (select * from def_rlset ur where ur.staffpid = :userId) auth on r.rolcode = auth.rolcode
            ]]></value>
		</entry>
		<entry key="roleSet_findMenu">
			<value><![CDATA[
			    SELECT DISTINCT * FROM (
				SELECT (P.PGMTYPE*1000+P.PGMTYP*100+P.SEQ*0.01) AS S, P.* FROM DEF_PGM P
				INNER JOIN DEF_RLF RLF ON P.PGMCODE = RLF.PGMCODE
				INNER JOIN DEF_RLE R ON R.ROLCODE = RLF.ROLCODE
				WHERE RLF.ROLCODE IN (:roleCodes) AND P.INPUTFLG = '1' AND P.SYSTYP = :sysType AND R.STU = '0' AND R.SYSTYP = :sysType
				) ORDER BY S
            ]]></value>
		</entry>
		
		<!-- Sequence -->
		<entry key="Sequence.listAll">
			<value><![CDATA[select * from cfg_Sequence order by seqNode]]></value>
		</entry>
		<entry key="Sequence.findBySeqNode">
			<value><![CDATA[select * from cfg_Sequence where seqNode = :seqNode]]></value>
		</entry>
		<entry key="Sequence.updateByNodeAndNextSeq">
			<value><![CDATA[update cfg_Sequence set nextSeq=:nextSeq,rounds=:rounds,updateTime=:updateTime where seqNode=:seqNode and nextSeq=:oldSeq]]></value>
		</entry>
		<entry key="Sequence.insert">
			<value><![CDATA[INSERT INTO cfg_Sequence (seqNode, NEXTSEQ, ROUNDS,updateTime ) VALUES (:seqNode,:nextSeq,:rounds,:updateTime)]]></value>
		</entry>
	</util:map>

</beans>
